/* Auto-generated by genmsg_cpp for file /home/robotics/summer2012/hmc-robot-code/ardrone_emulator/srv/DroneControl.srv */
#ifndef ARDRONE_EMULATOR_SERVICE_DRONECONTROL_H
#define ARDRONE_EMULATOR_SERVICE_DRONECONTROL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ardrone_emulator
{
template <class ContainerAllocator>
struct DroneControlRequest_ {
  typedef DroneControlRequest_<ContainerAllocator> Type;

  DroneControlRequest_()
  : command()
  {
  }

  DroneControlRequest_(const ContainerAllocator& _alloc)
  : command(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  command;


private:
  static const char* __s_getDataType_() { return "ardrone_emulator/DroneControlRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "cba5e21e920a3a2b7b375cb65b64cdea"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "031d24522d462b2314fd1b6270670dd2"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string command\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, command);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, command);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(command);
    return size;
  }

  typedef boost::shared_ptr< ::ardrone_emulator::DroneControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_emulator::DroneControlRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DroneControlRequest
typedef  ::ardrone_emulator::DroneControlRequest_<std::allocator<void> > DroneControlRequest;

typedef boost::shared_ptr< ::ardrone_emulator::DroneControlRequest> DroneControlRequestPtr;
typedef boost::shared_ptr< ::ardrone_emulator::DroneControlRequest const> DroneControlRequestConstPtr;


template <class ContainerAllocator>
struct DroneControlResponse_ {
  typedef DroneControlResponse_<ContainerAllocator> Type;

  DroneControlResponse_()
  : success(false)
  {
  }

  DroneControlResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


private:
  static const char* __s_getDataType_() { return "ardrone_emulator/DroneControlResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "358e233cde0c8a8bcfea4ce193f8fc15"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "031d24522d462b2314fd1b6270670dd2"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool success\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::ardrone_emulator::DroneControlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_emulator::DroneControlResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DroneControlResponse
typedef  ::ardrone_emulator::DroneControlResponse_<std::allocator<void> > DroneControlResponse;

typedef boost::shared_ptr< ::ardrone_emulator::DroneControlResponse> DroneControlResponsePtr;
typedef boost::shared_ptr< ::ardrone_emulator::DroneControlResponse const> DroneControlResponseConstPtr;

struct DroneControl
{

typedef DroneControlRequest Request;
typedef DroneControlResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct DroneControl
} // namespace ardrone_emulator

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ardrone_emulator::DroneControlRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ardrone_emulator::DroneControlRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ardrone_emulator::DroneControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cba5e21e920a3a2b7b375cb65b64cdea";
  }

  static const char* value(const  ::ardrone_emulator::DroneControlRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcba5e21e920a3a2bULL;
  static const uint64_t static_value2 = 0x7b375cb65b64cdeaULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_emulator::DroneControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_emulator/DroneControlRequest";
  }

  static const char* value(const  ::ardrone_emulator::DroneControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ardrone_emulator::DroneControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string command\n\
\n\
";
  }

  static const char* value(const  ::ardrone_emulator::DroneControlRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ardrone_emulator::DroneControlResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ardrone_emulator::DroneControlResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ardrone_emulator::DroneControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::ardrone_emulator::DroneControlResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_emulator::DroneControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_emulator/DroneControlResponse";
  }

  static const char* value(const  ::ardrone_emulator::DroneControlResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ardrone_emulator::DroneControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::ardrone_emulator::DroneControlResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ardrone_emulator::DroneControlResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ardrone_emulator::DroneControlRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.command);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DroneControlRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ardrone_emulator::DroneControlResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DroneControlResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ardrone_emulator::DroneControl> {
  static const char* value() 
  {
    return "031d24522d462b2314fd1b6270670dd2";
  }

  static const char* value(const ardrone_emulator::DroneControl&) { return value(); } 
};

template<>
struct DataType<ardrone_emulator::DroneControl> {
  static const char* value() 
  {
    return "ardrone_emulator/DroneControl";
  }

  static const char* value(const ardrone_emulator::DroneControl&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ardrone_emulator::DroneControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "031d24522d462b2314fd1b6270670dd2";
  }

  static const char* value(const ardrone_emulator::DroneControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ardrone_emulator::DroneControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_emulator/DroneControl";
  }

  static const char* value(const ardrone_emulator::DroneControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ardrone_emulator::DroneControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "031d24522d462b2314fd1b6270670dd2";
  }

  static const char* value(const ardrone_emulator::DroneControlResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ardrone_emulator::DroneControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_emulator/DroneControl";
  }

  static const char* value(const ardrone_emulator::DroneControlResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ARDRONE_EMULATOR_SERVICE_DRONECONTROL_H

